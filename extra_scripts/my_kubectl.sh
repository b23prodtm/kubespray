#!/usr/bin/env bash
# Ansible was already run with all tasks tags
TOPDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)
CONFIG_FILE=${CONFIG_FILE:-"${TOPDIR}/inventory/mycluster/inventory.yaml"}
defaults=("proxy")
options=()
usage=(
"Usage: $0  " \
"           [-i, --inventory $CONFIG_FILE] [options]" \
"           proxy             (default) starts a K8s controller proxy on the localhost." \
"           get nodes         outputs a list of available master and nodes." \
"           cluster-info      gets information about the cluster and list url to the dashboard." \
"Installing dashboard usage:" \
"           create serviceaccount dashboard -n default" \
"                             1. create a service account for a dashboard in the default namespace" \
"           get secret \$($0 -i $CONFIG_FILE get serviceaccounts dashboard -o jsonpath=\"{.secrets[0].name}\") -o jsonpath=\"{.data.token}\" | base64 --decode" \
"                             2. prints login secret token required for your dashboard login " \
"           create clusterrolebinding dashboard-admin -n default \ --clusterrole=cluster-admin \ --serviceaccount=default:dashboard" \
"DEBUG=1 $0 prints out dashboard URLS" \
"")
[ "$#" -lt 2 ] && printf "%s\n" "${usage[@]}" && exit 0
while [ "$#" -gt 0 ]; do case $1 in
  -i*|--inventory)
    shift
    CONFIG_FILE=$1;;
  -h*|--help)
    printf "%s\n" "${usage[@]}"
    exit 0;;
  -v|--verbose)
    DEBUG=1;;
  *)
    options=("${options[@]}" "$@")
    defaults=()
    break;;
esac; shift; done
artifacts=$(cd "$(dirname "$CONFIG_FILE")/artifacts" && pwd)
# Ensure binary compatibility on host machine (arch is different)
[ $DEBUG ] && logger -st kubectl "Symlink $(command -v kubectl)"
[ -f "$(command -v kubectl)" ] && ln -sf /usr/local/bin/kubectl "${artifacts}/kubectl"
# We check the kube-api cluster health with the following script that was generated by ansible.
[ $DEBUG ] && logger -st kubectl "Artifacts folder: ${artifacts}"
KUBE=${artifacts}kubectl.sh
function URL() {
  url=(
  "http://$1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/"
  "http://$1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"
  )
  printf "%s:\n" "dashboard" "  url"
  printf "   - %s\n" "${url[@]}"
}
if [ ! -f "$KUBE" ]; then
  users=("$(python3 "${TOPDIR}/library/yaml-tool.py" --kube-hosts="$artifacts/hosts.yaml" etcd ansible_user)")
  hosts=("$(python3 "${TOPDIR}/library/yaml-tool.py" --kube-hosts="$artifacts/hosts.yaml" etcd ansible_ssh_host)")
  [ $DEBUG ] && printf "ssh %s" "${users[0]}@${hosts[0]}"
  # original kode: https://dzone.com/articles/how-to-install-the-kubernetes-dashboard
  ssh "${users[0]}@${hosts[0]}" sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml
  [ $DEBUG ] && URL "${hosts[0]}"
  # shellcheck disable=SC2029
  ssh "${users[0]}@${hosts[0]}" "sudo kubectl ${defaults[*]}${options[*]}"
else
  options=("${options[@]} --kubeconfig=${artifacts}admin.conf")
  [ $DEBUG ] && URL "localhost"
  [ $DEBUG ] && logger -st kubectl "$KUBE ${defaults[*]}${options[*]}"
  "$KUBE ${defaults[*]} ${options[*]}"
fi
